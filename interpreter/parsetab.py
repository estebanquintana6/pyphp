
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocCOMPnonassocEQGREATERLESSleftPLUSMINUSleftMULDIVrightNOTrightLBRACKETAND BOOL COMMA COMMENT COMP DIV ELSE END EQ FOR FUNCTION GREATER GREATER_OR_EQUAL ID IF LBRACKET LESS LPAREN MINUS MUL NOT NUMBER OR PLUS RBRACKET RPAREN SCOLO SMALLER_OR_EQUAL START STARTCLOSE STRING VAR WHITESPACE XOR\n    program : declaration-list\n    \n    declaration-list : declaration\n                   | declaration declaration-list\n    \n    declaration : funDeclaration\n                | varDeclaration\n    \n    varDeclaration : VAR ID EQ expression SCOLO\n    \n    varDeclaration : VAR ID SCOLO\n    \n    funDeclaration : FUNCTION function\n    \n    function : ID parameters block\n    \n    parameters : LPAREN RPAREN\n               | LPAREN paramList RPAREN\n    \n    paramList : parameter\n                   | parameter COMMA paramList\n    \n    parameter : ID\n    \n    block : LBRACKET RBRACKET\n          | LBRACKET statement-list RBRACKET\n    \n    statement-list : statement\n                   | statement statement-list\n    \n    statement : declaration\n              | expression\n              | if-statement\n    \n    expression : basic-expr\n                | assignment-expr SCOLO\n                | var-assign SCOLO\n                | comparison-expr\n    \n    string : STRING\n    \n    basic-expr : ID\n    \n    basic-expr : number\n                | string\n    \n    number : NUMBER\n    \n    variable : ID\n    \n    var-assign : variable EQ basic-expr\n    \n    var-assign : variable EQ assignment-expr\n    \n    assignment-expr : basic-expr  math-operator basic-expr\n                     | basic-expr math-operator assignment-expr\n    \n    comparison-expr : basic-expr comp-operator basic-expr\n                          | basic-expr comp-operator comparison-expr\n    \n    comp-operator : GREATER\n                    | LESS\n                    | GREATER_OR_EQUAL\n                    | SMALLER_OR_EQUAL\n                    | COMP\n                    | NOT\n    \n    math-operator : PLUS\n                | MINUS\n                | MUL\n                | DIV\n    \n    if-statement : IF LPAREN expression RPAREN block\n                | IF LPAREN expression RPAREN block else-statement\n    \n    else-statement : ELSE block\n    '
    
_lr_action_items = {'LESS':([22,23,24,26,30,32,64,65,],[-29,-30,43,-28,-27,-26,-27,43,]),'NUMBER':([3,5,8,14,15,16,17,22,23,24,26,30,31,32,33,34,36,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,64,65,66,71,72,74,],[-5,-4,-8,23,-7,23,-9,-29,-30,-22,-28,-27,-25,-26,23,-19,-21,-15,-20,23,-39,-42,-40,-41,-44,23,-43,-46,-47,-45,-38,-24,23,-23,-6,23,-16,-27,-36,-37,-48,-49,-50,]),'LBRACKET':([12,18,40,70,73,],[16,-10,-11,16,16,]),'MUL':([22,23,24,26,30,32,62,64,67,],[-29,-30,50,-28,-27,-26,50,-27,50,]),'DIV':([22,23,24,26,30,32,62,64,67,],[-29,-30,51,-28,-27,-26,51,-27,51,]),'MINUS':([22,23,24,26,30,32,62,64,67,],[-29,-30,52,-28,-27,-26,52,-27,52,]),'RPAREN':([13,19,20,21,22,23,24,26,30,31,32,54,56,61,64,65,66,69,],[18,40,-12,-14,-29,-30,-22,-28,-27,-25,-26,-24,-23,-13,-27,-36,-37,70,]),'SCOLO':([11,22,23,24,25,26,28,29,30,31,32,54,56,62,63,64,65,66,67,68,],[15,-29,-30,-22,54,-28,56,57,-27,-25,-26,-24,-23,-34,-35,-27,-36,-37,-32,-33,]),'ID':([1,3,5,7,8,13,14,15,16,17,22,23,24,26,30,31,32,33,34,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,64,65,66,71,72,74,],[9,-5,-4,11,-8,21,30,-7,30,-9,-29,-30,-22,-28,-27,-25,-26,30,-19,-21,-15,-20,21,64,-39,-42,-40,-41,-44,64,-43,-46,-47,-45,-38,-24,64,-23,-6,30,-16,-27,-36,-37,-48,-49,-50,]),'COMMA':([20,21,],[41,-14,]),'PLUS':([22,23,24,26,30,32,62,64,67,],[-29,-30,47,-28,-27,-26,47,-27,47,]),'$end':([2,3,4,5,6,8,10,15,17,38,57,60,],[0,-5,-1,-4,-2,-8,-3,-7,-9,-15,-6,-16,]),'FUNCTION':([0,3,5,6,8,15,16,17,22,23,24,26,30,31,32,33,34,36,38,39,54,56,57,60,64,65,66,71,72,74,],[1,-5,-4,1,-8,-7,1,-9,-29,-30,-22,-28,-27,-25,-26,1,-19,-21,-15,-20,-24,-23,-6,-16,-27,-36,-37,-48,-49,-50,]),'STRING':([3,5,8,14,15,16,17,22,23,24,26,30,31,32,33,34,36,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,64,65,66,71,72,74,],[-5,-4,-8,32,-7,32,-9,-29,-30,-22,-28,-27,-25,-26,32,-19,-21,-15,-20,32,-39,-42,-40,-41,-44,32,-43,-46,-47,-45,-38,-24,32,-23,-6,32,-16,-27,-36,-37,-48,-49,-50,]),'GREATER_OR_EQUAL':([22,23,24,26,30,32,64,65,],[-29,-30,45,-28,-27,-26,-27,45,]),'COMP':([22,23,24,26,30,32,64,65,],[-29,-30,44,-28,-27,-26,-27,44,]),'ELSE':([38,60,71,],[-15,-16,73,]),'LPAREN':([9,35,],[13,59,]),'VAR':([0,3,5,6,8,15,16,17,22,23,24,26,30,31,32,33,34,36,38,39,54,56,57,60,64,65,66,71,72,74,],[7,-5,-4,7,-8,-7,7,-9,-29,-30,-22,-28,-27,-25,-26,7,-19,-21,-15,-20,-24,-23,-6,-16,-27,-36,-37,-48,-49,-50,]),'EQ':([11,27,30,],[14,55,-31,]),'SMALLER_OR_EQUAL':([22,23,24,26,30,32,64,65,],[-29,-30,46,-28,-27,-26,-27,46,]),'IF':([3,5,8,15,16,17,22,23,24,26,30,31,32,33,34,36,38,39,54,56,57,60,64,65,66,71,72,74,],[-5,-4,-8,-7,35,-9,-29,-30,-22,-28,-27,-25,-26,35,-19,-21,-15,-20,-24,-23,-6,-16,-27,-36,-37,-48,-49,-50,]),'GREATER':([22,23,24,26,30,32,64,65,],[-29,-30,53,-28,-27,-26,-27,53,]),'NOT':([22,23,24,26,30,32,64,65,],[-29,-30,49,-28,-27,-26,-27,49,]),'RBRACKET':([3,5,8,15,16,17,22,23,24,26,30,31,32,33,34,36,37,38,39,54,56,57,58,60,64,65,66,71,72,74,],[-5,-4,-8,-7,38,-9,-29,-30,-22,-28,-27,-25,-26,-17,-19,-21,60,-15,-20,-24,-23,-6,-18,-16,-27,-36,-37,-48,-49,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'varDeclaration':([0,6,16,33,],[3,3,3,3,]),'paramList':([13,41,],[19,61,]),'number':([14,16,33,42,48,55,59,],[26,26,26,26,26,26,26,]),'comp-operator':([24,65,],[48,48,]),'comparison-expr':([14,16,33,48,59,],[31,31,31,66,31,]),'parameters':([9,],[12,]),'declaration-list':([0,6,],[4,10,]),'program':([0,],[2,]),'assignment-expr':([14,16,33,42,55,59,],[28,28,28,63,68,28,]),'parameter':([13,41,],[20,20,]),'function':([1,],[8,]),'funDeclaration':([0,6,16,33,],[5,5,5,5,]),'string':([14,16,33,42,48,55,59,],[22,22,22,22,22,22,22,]),'math-operator':([24,62,67,],[42,42,42,]),'basic-expr':([14,16,33,42,48,55,59,],[24,24,24,62,65,67,24,]),'declaration':([0,6,16,33,],[6,6,34,34,]),'variable':([14,16,33,59,],[27,27,27,27,]),'else-statement':([71,],[72,]),'var-assign':([14,16,33,59,],[25,25,25,25,]),'if-statement':([16,33,],[36,36,]),'statement':([16,33,],[33,33,]),'statement-list':([16,33,],[37,58,]),'expression':([14,16,33,59,],[29,39,39,69,]),'block':([12,70,73,],[17,71,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration-list','program',1,'p_program','phpparser.py',84),
  ('declaration-list -> declaration','declaration-list',1,'p_declarationlist','phpparser.py',92),
  ('declaration-list -> declaration declaration-list','declaration-list',2,'p_declarationlist','phpparser.py',93),
  ('declaration -> funDeclaration','declaration',1,'p_declaration','phpparser.py',103),
  ('declaration -> varDeclaration','declaration',1,'p_declaration','phpparser.py',104),
  ('varDeclaration -> VAR ID EQ expression SCOLO','varDeclaration',5,'p_varDeclaration2','phpparser.py',111),
  ('varDeclaration -> VAR ID SCOLO','varDeclaration',3,'p_varDeclaration','phpparser.py',118),
  ('funDeclaration -> FUNCTION function','funDeclaration',2,'p_funDeclaration','phpparser.py',131),
  ('function -> ID parameters block','function',3,'p_function','phpparser.py',139),
  ('parameters -> LPAREN RPAREN','parameters',2,'p_parameters','phpparser.py',147),
  ('parameters -> LPAREN paramList RPAREN','parameters',3,'p_parameters','phpparser.py',148),
  ('paramList -> parameter','paramList',1,'p_parameter_list','phpparser.py',161),
  ('paramList -> parameter COMMA paramList','paramList',3,'p_parameter_list','phpparser.py',162),
  ('parameter -> ID','parameter',1,'p_parameter','phpparser.py',173),
  ('block -> LBRACKET RBRACKET','block',2,'p_block','phpparser.py',181),
  ('block -> LBRACKET statement-list RBRACKET','block',3,'p_block','phpparser.py',182),
  ('statement-list -> statement','statement-list',1,'p_statement_list','phpparser.py',196),
  ('statement-list -> statement statement-list','statement-list',2,'p_statement_list','phpparser.py',197),
  ('statement -> declaration','statement',1,'p_statement','phpparser.py',207),
  ('statement -> expression','statement',1,'p_statement','phpparser.py',208),
  ('statement -> if-statement','statement',1,'p_statement','phpparser.py',209),
  ('expression -> basic-expr','expression',1,'p_expression','phpparser.py',216),
  ('expression -> assignment-expr SCOLO','expression',2,'p_expression','phpparser.py',217),
  ('expression -> var-assign SCOLO','expression',2,'p_expression','phpparser.py',218),
  ('expression -> comparison-expr','expression',1,'p_expression','phpparser.py',219),
  ('string -> STRING','string',1,'p_string','phpparser.py',226),
  ('basic-expr -> ID','basic-expr',1,'p_basic2','phpparser.py',234),
  ('basic-expr -> number','basic-expr',1,'p_basic','phpparser.py',246),
  ('basic-expr -> string','basic-expr',1,'p_basic','phpparser.py',247),
  ('number -> NUMBER','number',1,'p_number','phpparser.py',285),
  ('variable -> ID','variable',1,'p_variable','phpparser.py',293),
  ('var-assign -> variable EQ basic-expr','var-assign',3,'p_constant_assignment','phpparser.py',301),
  ('var-assign -> variable EQ assignment-expr','var-assign',3,'p_variable_assignment','phpparser.py',319),
  ('assignment-expr -> basic-expr math-operator basic-expr','assignment-expr',3,'p_assignment_expression','phpparser.py',337),
  ('assignment-expr -> basic-expr math-operator assignment-expr','assignment-expr',3,'p_assignment_expression','phpparser.py',338),
  ('comparison-expr -> basic-expr comp-operator basic-expr','comparison-expr',3,'p_comparison_expr','phpparser.py',353),
  ('comparison-expr -> basic-expr comp-operator comparison-expr','comparison-expr',3,'p_comparison_expr','phpparser.py',354),
  ('comp-operator -> GREATER','comp-operator',1,'p_comparison_operators','phpparser.py',361),
  ('comp-operator -> LESS','comp-operator',1,'p_comparison_operators','phpparser.py',362),
  ('comp-operator -> GREATER_OR_EQUAL','comp-operator',1,'p_comparison_operators','phpparser.py',363),
  ('comp-operator -> SMALLER_OR_EQUAL','comp-operator',1,'p_comparison_operators','phpparser.py',364),
  ('comp-operator -> COMP','comp-operator',1,'p_comparison_operators','phpparser.py',365),
  ('comp-operator -> NOT','comp-operator',1,'p_comparison_operators','phpparser.py',366),
  ('math-operator -> PLUS','math-operator',1,'p_binary_op','phpparser.py',374),
  ('math-operator -> MINUS','math-operator',1,'p_binary_op','phpparser.py',375),
  ('math-operator -> MUL','math-operator',1,'p_binary_op','phpparser.py',376),
  ('math-operator -> DIV','math-operator',1,'p_binary_op','phpparser.py',377),
  ('if-statement -> IF LPAREN expression RPAREN block','if-statement',5,'p_if_statement','phpparser.py',385),
  ('if-statement -> IF LPAREN expression RPAREN block else-statement','if-statement',6,'p_if_statement','phpparser.py',386),
  ('else-statement -> ELSE block','else-statement',2,'p_else_statement','phpparser.py',397),
]
