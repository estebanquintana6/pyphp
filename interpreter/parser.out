Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    WHITESPACE
    COMMENT
    STARTCLOSE
    END
    FOR
    XOR
    START
    AND
    BOOL
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration-list
Rule 2     declaration-list -> declaration
Rule 3     declaration-list -> declaration declaration-list
Rule 4     declaration -> funDeclaration
Rule 5     declaration -> varDeclaration
Rule 6     varDeclaration -> VAR ID EQ expression SCOLO
Rule 7     varDeclaration -> VAR ID SCOLO
Rule 8     funDeclaration -> FUNCTION function
Rule 9     function -> ID parameters block
Rule 10    parameters -> LPAREN RPAREN
Rule 11    parameters -> LPAREN paramList RPAREN
Rule 12    paramList -> parameter
Rule 13    paramList -> parameter COMMA paramList
Rule 14    parameter -> ID
Rule 15    block -> LBRACKET RBRACKET
Rule 16    block -> LBRACKET statement-list RBRACKET
Rule 17    statement-list -> statement
Rule 18    statement-list -> statement statement-list
Rule 19    statement -> declaration
Rule 20    statement -> expression
Rule 21    statement -> if-statement
Rule 22    expression -> basic-expr
Rule 23    expression -> assignment-expr SCOLO
Rule 24    expression -> var-assign SCOLO
Rule 25    expression -> comparison-expr
Rule 26    string -> STRING
Rule 27    basic-expr -> variable
Rule 28    basic-expr -> number
Rule 29    basic-expr -> string
Rule 30    identifier -> number
Rule 31    number -> NUMBER
Rule 32    variable -> ID
Rule 33    var-assign -> variable EQ basic-expr
Rule 34    var-assign -> variable EQ assignment-expr
Rule 35    assignment-expr -> identifier math-operator identifier
Rule 36    assignment-expr -> identifier math-operator assignment-expr
Rule 37    comparison-expr -> basic-expr comp-operator basic-expr
Rule 38    comparison-expr -> basic-expr comp-operator comparison-expr
Rule 39    comp-operator -> GREATER
Rule 40    comp-operator -> LESS
Rule 41    comp-operator -> GREATER_OR_EQUAL
Rule 42    comp-operator -> SMALLER_OR_EQUAL
Rule 43    comp-operator -> COMP
Rule 44    comp-operator -> NOT
Rule 45    math-operator -> PLUS
Rule 46    math-operator -> MINUS
Rule 47    math-operator -> MUL
Rule 48    math-operator -> DIV
Rule 49    if-statement -> IF LPAREN expression RPAREN block
Rule 50    if-statement -> IF LPAREN expression RPAREN block else-statement
Rule 51    else-statement -> ELSE block

Terminals, with rules where they appear

AND                  : 
BOOL                 : 
COMMA                : 13
COMMENT              : 
COMP                 : 43
DIV                  : 48
ELSE                 : 51
END                  : 
EQ                   : 6 33 34
FOR                  : 
FUNCTION             : 8
GREATER              : 39
GREATER_OR_EQUAL     : 41
ID                   : 6 7 9 14 32
IF                   : 49 50
LBRACKET             : 15 16
LESS                 : 40
LPAREN               : 10 11 49 50
MINUS                : 46
MUL                  : 47
NOT                  : 44
NUMBER               : 31
OR                   : 
PLUS                 : 45
RBRACKET             : 15 16
RPAREN               : 10 11 49 50
SCOLO                : 6 7 23 24
SMALLER_OR_EQUAL     : 42
START                : 
STARTCLOSE           : 
STRING               : 26
VAR                  : 6 7
WHITESPACE           : 
XOR                  : 
error                : 

Nonterminals, with rules where they appear

assignment-expr      : 23 34 36
basic-expr           : 22 33 37 37 38
block                : 9 49 50 51
comp-operator        : 37 38
comparison-expr      : 25 38
declaration          : 2 3 19
declaration-list     : 1 3
else-statement       : 50
expression           : 6 20 49 50
funDeclaration       : 4
function             : 8
identifier           : 35 35 36
if-statement         : 21
math-operator        : 35 36
number               : 28 30
paramList            : 11 13
parameter            : 12 13
parameters           : 9
program              : 0
statement            : 17 18
statement-list       : 16 18
string               : 29
var-assign           : 24
varDeclaration       : 5
variable             : 27 33 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration-list
    (2) declaration-list -> . declaration
    (3) declaration-list -> . declaration declaration-list
    (4) declaration -> . funDeclaration
    (5) declaration -> . varDeclaration
    (8) funDeclaration -> . FUNCTION function
    (6) varDeclaration -> . VAR ID EQ expression SCOLO
    (7) varDeclaration -> . VAR ID SCOLO

    FUNCTION        shift and go to state 1
    VAR             shift and go to state 7

    program                        shift and go to state 2
    varDeclaration                 shift and go to state 3
    declaration-list               shift and go to state 4
    funDeclaration                 shift and go to state 5
    declaration                    shift and go to state 6

state 1

    (8) funDeclaration -> FUNCTION . function
    (9) function -> . ID parameters block

    ID              shift and go to state 9

    function                       shift and go to state 8

state 2

    (0) S' -> program .



state 3

    (5) declaration -> varDeclaration .

    IF              reduce using rule 5 (declaration -> varDeclaration .)
    FUNCTION        reduce using rule 5 (declaration -> varDeclaration .)
    VAR             reduce using rule 5 (declaration -> varDeclaration .)
    ID              reduce using rule 5 (declaration -> varDeclaration .)
    NUMBER          reduce using rule 5 (declaration -> varDeclaration .)
    STRING          reduce using rule 5 (declaration -> varDeclaration .)
    RBRACKET        reduce using rule 5 (declaration -> varDeclaration .)
    $end            reduce using rule 5 (declaration -> varDeclaration .)


state 4

    (1) program -> declaration-list .

    $end            reduce using rule 1 (program -> declaration-list .)


state 5

    (4) declaration -> funDeclaration .

    IF              reduce using rule 4 (declaration -> funDeclaration .)
    FUNCTION        reduce using rule 4 (declaration -> funDeclaration .)
    VAR             reduce using rule 4 (declaration -> funDeclaration .)
    ID              reduce using rule 4 (declaration -> funDeclaration .)
    NUMBER          reduce using rule 4 (declaration -> funDeclaration .)
    STRING          reduce using rule 4 (declaration -> funDeclaration .)
    RBRACKET        reduce using rule 4 (declaration -> funDeclaration .)
    $end            reduce using rule 4 (declaration -> funDeclaration .)


state 6

    (2) declaration-list -> declaration .
    (3) declaration-list -> declaration . declaration-list
    (2) declaration-list -> . declaration
    (3) declaration-list -> . declaration declaration-list
    (4) declaration -> . funDeclaration
    (5) declaration -> . varDeclaration
    (8) funDeclaration -> . FUNCTION function
    (6) varDeclaration -> . VAR ID EQ expression SCOLO
    (7) varDeclaration -> . VAR ID SCOLO

    $end            reduce using rule 2 (declaration-list -> declaration .)
    FUNCTION        shift and go to state 1
    VAR             shift and go to state 7

    varDeclaration                 shift and go to state 3
    declaration-list               shift and go to state 10
    funDeclaration                 shift and go to state 5
    declaration                    shift and go to state 6

state 7

    (6) varDeclaration -> VAR . ID EQ expression SCOLO
    (7) varDeclaration -> VAR . ID SCOLO

    ID              shift and go to state 11


state 8

    (8) funDeclaration -> FUNCTION function .

    IF              reduce using rule 8 (funDeclaration -> FUNCTION function .)
    FUNCTION        reduce using rule 8 (funDeclaration -> FUNCTION function .)
    VAR             reduce using rule 8 (funDeclaration -> FUNCTION function .)
    ID              reduce using rule 8 (funDeclaration -> FUNCTION function .)
    NUMBER          reduce using rule 8 (funDeclaration -> FUNCTION function .)
    STRING          reduce using rule 8 (funDeclaration -> FUNCTION function .)
    RBRACKET        reduce using rule 8 (funDeclaration -> FUNCTION function .)
    $end            reduce using rule 8 (funDeclaration -> FUNCTION function .)


state 9

    (9) function -> ID . parameters block
    (10) parameters -> . LPAREN RPAREN
    (11) parameters -> . LPAREN paramList RPAREN

    LPAREN          shift and go to state 13

    parameters                     shift and go to state 12

state 10

    (3) declaration-list -> declaration declaration-list .

    $end            reduce using rule 3 (declaration-list -> declaration declaration-list .)


state 11

    (6) varDeclaration -> VAR ID . EQ expression SCOLO
    (7) varDeclaration -> VAR ID . SCOLO

    EQ              shift and go to state 14
    SCOLO           shift and go to state 15


state 12

    (9) function -> ID parameters . block
    (15) block -> . LBRACKET RBRACKET
    (16) block -> . LBRACKET statement-list RBRACKET

    LBRACKET        shift and go to state 16

    block                          shift and go to state 17

state 13

    (10) parameters -> LPAREN . RPAREN
    (11) parameters -> LPAREN . paramList RPAREN
    (12) paramList -> . parameter
    (13) paramList -> . parameter COMMA paramList
    (14) parameter -> . ID

    RPAREN          shift and go to state 18
    ID              shift and go to state 21

    parameter                      shift and go to state 20
    paramList                      shift and go to state 19

state 14

    (6) varDeclaration -> VAR ID EQ . expression SCOLO
    (22) expression -> . basic-expr
    (23) expression -> . assignment-expr SCOLO
    (24) expression -> . var-assign SCOLO
    (25) expression -> . comparison-expr
    (27) basic-expr -> . variable
    (28) basic-expr -> . number
    (29) basic-expr -> . string
    (35) assignment-expr -> . identifier math-operator identifier
    (36) assignment-expr -> . identifier math-operator assignment-expr
    (33) var-assign -> . variable EQ basic-expr
    (34) var-assign -> . variable EQ assignment-expr
    (37) comparison-expr -> . basic-expr comp-operator basic-expr
    (38) comparison-expr -> . basic-expr comp-operator comparison-expr
    (32) variable -> . ID
    (31) number -> . NUMBER
    (26) string -> . STRING
    (30) identifier -> . number

    ID              shift and go to state 31
    NUMBER          shift and go to state 23
    STRING          shift and go to state 33

    string                         shift and go to state 22
    basic-expr                     shift and go to state 24
    var-assign                     shift and go to state 25
    number                         shift and go to state 26
    assignment-expr                shift and go to state 28
    variable                       shift and go to state 27
    identifier                     shift and go to state 29
    expression                     shift and go to state 30
    comparison-expr                shift and go to state 32

state 15

    (7) varDeclaration -> VAR ID SCOLO .

    FUNCTION        reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    VAR             reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    $end            reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    IF              reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    ID              reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    NUMBER          reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    STRING          reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)
    RBRACKET        reduce using rule 7 (varDeclaration -> VAR ID SCOLO .)


state 16

    (15) block -> LBRACKET . RBRACKET
    (16) block -> LBRACKET . statement-list RBRACKET
    (17) statement-list -> . statement
    (18) statement-list -> . statement statement-list
    (19) statement -> . declaration
    (20) statement -> . expression
    (21) statement -> . if-statement
    (4) declaration -> . funDeclaration
    (5) declaration -> . varDeclaration
    (22) expression -> . basic-expr
    (23) expression -> . assignment-expr SCOLO
    (24) expression -> . var-assign SCOLO
    (25) expression -> . comparison-expr
    (49) if-statement -> . IF LPAREN expression RPAREN block
    (50) if-statement -> . IF LPAREN expression RPAREN block else-statement
    (8) funDeclaration -> . FUNCTION function
    (6) varDeclaration -> . VAR ID EQ expression SCOLO
    (7) varDeclaration -> . VAR ID SCOLO
    (27) basic-expr -> . variable
    (28) basic-expr -> . number
    (29) basic-expr -> . string
    (35) assignment-expr -> . identifier math-operator identifier
    (36) assignment-expr -> . identifier math-operator assignment-expr
    (33) var-assign -> . variable EQ basic-expr
    (34) var-assign -> . variable EQ assignment-expr
    (37) comparison-expr -> . basic-expr comp-operator basic-expr
    (38) comparison-expr -> . basic-expr comp-operator comparison-expr
    (32) variable -> . ID
    (31) number -> . NUMBER
    (26) string -> . STRING
    (30) identifier -> . number

    RBRACKET        shift and go to state 39
    IF              shift and go to state 36
    FUNCTION        shift and go to state 1
    VAR             shift and go to state 7
    ID              shift and go to state 31
    NUMBER          shift and go to state 23
    STRING          shift and go to state 33

    funDeclaration                 shift and go to state 5
    statement-list                 shift and go to state 38
    string                         shift and go to state 22
    assignment-expr                shift and go to state 28
    basic-expr                     shift and go to state 24
    var-assign                     shift and go to state 25
    number                         shift and go to state 26
    if-statement                   shift and go to state 37
    varDeclaration                 shift and go to state 3
    statement                      shift and go to state 34
    declaration                    shift and go to state 35
    variable                       shift and go to state 27
    identifier                     shift and go to state 29
    expression                     shift and go to state 40
    comparison-expr                shift and go to state 32

state 17

    (9) function -> ID parameters block .

    FUNCTION        reduce using rule 9 (function -> ID parameters block .)
    VAR             reduce using rule 9 (function -> ID parameters block .)
    $end            reduce using rule 9 (function -> ID parameters block .)
    IF              reduce using rule 9 (function -> ID parameters block .)
    ID              reduce using rule 9 (function -> ID parameters block .)
    NUMBER          reduce using rule 9 (function -> ID parameters block .)
    STRING          reduce using rule 9 (function -> ID parameters block .)
    RBRACKET        reduce using rule 9 (function -> ID parameters block .)


state 18

    (10) parameters -> LPAREN RPAREN .

    LBRACKET        reduce using rule 10 (parameters -> LPAREN RPAREN .)


state 19

    (11) parameters -> LPAREN paramList . RPAREN

    RPAREN          shift and go to state 41


state 20

    (12) paramList -> parameter .
    (13) paramList -> parameter . COMMA paramList

    RPAREN          reduce using rule 12 (paramList -> parameter .)
    COMMA           shift and go to state 42


state 21

    (14) parameter -> ID .

    COMMA           reduce using rule 14 (parameter -> ID .)
    RPAREN          reduce using rule 14 (parameter -> ID .)


state 22

    (29) basic-expr -> string .

    GREATER         reduce using rule 29 (basic-expr -> string .)
    LESS            reduce using rule 29 (basic-expr -> string .)
    GREATER_OR_EQUAL reduce using rule 29 (basic-expr -> string .)
    SMALLER_OR_EQUAL reduce using rule 29 (basic-expr -> string .)
    COMP            reduce using rule 29 (basic-expr -> string .)
    NOT             reduce using rule 29 (basic-expr -> string .)
    SCOLO           reduce using rule 29 (basic-expr -> string .)
    IF              reduce using rule 29 (basic-expr -> string .)
    FUNCTION        reduce using rule 29 (basic-expr -> string .)
    VAR             reduce using rule 29 (basic-expr -> string .)
    ID              reduce using rule 29 (basic-expr -> string .)
    NUMBER          reduce using rule 29 (basic-expr -> string .)
    STRING          reduce using rule 29 (basic-expr -> string .)
    RBRACKET        reduce using rule 29 (basic-expr -> string .)
    RPAREN          reduce using rule 29 (basic-expr -> string .)


state 23

    (31) number -> NUMBER .

    GREATER         reduce using rule 31 (number -> NUMBER .)
    LESS            reduce using rule 31 (number -> NUMBER .)
    GREATER_OR_EQUAL reduce using rule 31 (number -> NUMBER .)
    SMALLER_OR_EQUAL reduce using rule 31 (number -> NUMBER .)
    COMP            reduce using rule 31 (number -> NUMBER .)
    NOT             reduce using rule 31 (number -> NUMBER .)
    SCOLO           reduce using rule 31 (number -> NUMBER .)
    PLUS            reduce using rule 31 (number -> NUMBER .)
    MINUS           reduce using rule 31 (number -> NUMBER .)
    MUL             reduce using rule 31 (number -> NUMBER .)
    DIV             reduce using rule 31 (number -> NUMBER .)
    IF              reduce using rule 31 (number -> NUMBER .)
    FUNCTION        reduce using rule 31 (number -> NUMBER .)
    VAR             reduce using rule 31 (number -> NUMBER .)
    ID              reduce using rule 31 (number -> NUMBER .)
    NUMBER          reduce using rule 31 (number -> NUMBER .)
    STRING          reduce using rule 31 (number -> NUMBER .)
    RBRACKET        reduce using rule 31 (number -> NUMBER .)
    RPAREN          reduce using rule 31 (number -> NUMBER .)


state 24

    (22) expression -> basic-expr .
    (37) comparison-expr -> basic-expr . comp-operator basic-expr
    (38) comparison-expr -> basic-expr . comp-operator comparison-expr
    (39) comp-operator -> . GREATER
    (40) comp-operator -> . LESS
    (41) comp-operator -> . GREATER_OR_EQUAL
    (42) comp-operator -> . SMALLER_OR_EQUAL
    (43) comp-operator -> . COMP
    (44) comp-operator -> . NOT

    RPAREN          reduce using rule 22 (expression -> basic-expr .)
    IF              reduce using rule 22 (expression -> basic-expr .)
    FUNCTION        reduce using rule 22 (expression -> basic-expr .)
    VAR             reduce using rule 22 (expression -> basic-expr .)
    ID              reduce using rule 22 (expression -> basic-expr .)
    NUMBER          reduce using rule 22 (expression -> basic-expr .)
    STRING          reduce using rule 22 (expression -> basic-expr .)
    RBRACKET        reduce using rule 22 (expression -> basic-expr .)
    SCOLO           reduce using rule 22 (expression -> basic-expr .)
    GREATER         shift and go to state 43
    LESS            shift and go to state 46
    GREATER_OR_EQUAL shift and go to state 44
    SMALLER_OR_EQUAL shift and go to state 49
    COMP            shift and go to state 45
    NOT             shift and go to state 48

    comp-operator                  shift and go to state 47

state 25

    (24) expression -> var-assign . SCOLO

    SCOLO           shift and go to state 50


state 26

    (28) basic-expr -> number .
    (30) identifier -> number .

    GREATER         reduce using rule 28 (basic-expr -> number .)
    LESS            reduce using rule 28 (basic-expr -> number .)
    GREATER_OR_EQUAL reduce using rule 28 (basic-expr -> number .)
    SMALLER_OR_EQUAL reduce using rule 28 (basic-expr -> number .)
    COMP            reduce using rule 28 (basic-expr -> number .)
    NOT             reduce using rule 28 (basic-expr -> number .)
    IF              reduce using rule 28 (basic-expr -> number .)
    FUNCTION        reduce using rule 28 (basic-expr -> number .)
    VAR             reduce using rule 28 (basic-expr -> number .)
    ID              reduce using rule 28 (basic-expr -> number .)
    NUMBER          reduce using rule 28 (basic-expr -> number .)
    STRING          reduce using rule 28 (basic-expr -> number .)
    RBRACKET        reduce using rule 28 (basic-expr -> number .)
    SCOLO           reduce using rule 28 (basic-expr -> number .)
    RPAREN          reduce using rule 28 (basic-expr -> number .)
    PLUS            reduce using rule 30 (identifier -> number .)
    MINUS           reduce using rule 30 (identifier -> number .)
    MUL             reduce using rule 30 (identifier -> number .)
    DIV             reduce using rule 30 (identifier -> number .)


state 27

    (27) basic-expr -> variable .
    (33) var-assign -> variable . EQ basic-expr
    (34) var-assign -> variable . EQ assignment-expr

    GREATER         reduce using rule 27 (basic-expr -> variable .)
    LESS            reduce using rule 27 (basic-expr -> variable .)
    GREATER_OR_EQUAL reduce using rule 27 (basic-expr -> variable .)
    SMALLER_OR_EQUAL reduce using rule 27 (basic-expr -> variable .)
    COMP            reduce using rule 27 (basic-expr -> variable .)
    NOT             reduce using rule 27 (basic-expr -> variable .)
    IF              reduce using rule 27 (basic-expr -> variable .)
    FUNCTION        reduce using rule 27 (basic-expr -> variable .)
    VAR             reduce using rule 27 (basic-expr -> variable .)
    ID              reduce using rule 27 (basic-expr -> variable .)
    NUMBER          reduce using rule 27 (basic-expr -> variable .)
    STRING          reduce using rule 27 (basic-expr -> variable .)
    RBRACKET        reduce using rule 27 (basic-expr -> variable .)
    SCOLO           reduce using rule 27 (basic-expr -> variable .)
    RPAREN          reduce using rule 27 (basic-expr -> variable .)
    EQ              shift and go to state 51


state 28

    (23) expression -> assignment-expr . SCOLO

    SCOLO           shift and go to state 52


state 29

    (35) assignment-expr -> identifier . math-operator identifier
    (36) assignment-expr -> identifier . math-operator assignment-expr
    (45) math-operator -> . PLUS
    (46) math-operator -> . MINUS
    (47) math-operator -> . MUL
    (48) math-operator -> . DIV

    PLUS            shift and go to state 54
    MINUS           shift and go to state 57
    MUL             shift and go to state 55
    DIV             shift and go to state 56

    math-operator                  shift and go to state 53

state 30

    (6) varDeclaration -> VAR ID EQ expression . SCOLO

    SCOLO           shift and go to state 58


state 31

    (32) variable -> ID .

    EQ              reduce using rule 32 (variable -> ID .)
    GREATER         reduce using rule 32 (variable -> ID .)
    LESS            reduce using rule 32 (variable -> ID .)
    GREATER_OR_EQUAL reduce using rule 32 (variable -> ID .)
    SMALLER_OR_EQUAL reduce using rule 32 (variable -> ID .)
    COMP            reduce using rule 32 (variable -> ID .)
    NOT             reduce using rule 32 (variable -> ID .)
    SCOLO           reduce using rule 32 (variable -> ID .)
    IF              reduce using rule 32 (variable -> ID .)
    FUNCTION        reduce using rule 32 (variable -> ID .)
    VAR             reduce using rule 32 (variable -> ID .)
    ID              reduce using rule 32 (variable -> ID .)
    NUMBER          reduce using rule 32 (variable -> ID .)
    STRING          reduce using rule 32 (variable -> ID .)
    RBRACKET        reduce using rule 32 (variable -> ID .)
    RPAREN          reduce using rule 32 (variable -> ID .)


state 32

    (25) expression -> comparison-expr .

    RPAREN          reduce using rule 25 (expression -> comparison-expr .)
    IF              reduce using rule 25 (expression -> comparison-expr .)
    FUNCTION        reduce using rule 25 (expression -> comparison-expr .)
    VAR             reduce using rule 25 (expression -> comparison-expr .)
    ID              reduce using rule 25 (expression -> comparison-expr .)
    NUMBER          reduce using rule 25 (expression -> comparison-expr .)
    STRING          reduce using rule 25 (expression -> comparison-expr .)
    RBRACKET        reduce using rule 25 (expression -> comparison-expr .)
    SCOLO           reduce using rule 25 (expression -> comparison-expr .)


state 33

    (26) string -> STRING .

    GREATER         reduce using rule 26 (string -> STRING .)
    LESS            reduce using rule 26 (string -> STRING .)
    GREATER_OR_EQUAL reduce using rule 26 (string -> STRING .)
    SMALLER_OR_EQUAL reduce using rule 26 (string -> STRING .)
    COMP            reduce using rule 26 (string -> STRING .)
    NOT             reduce using rule 26 (string -> STRING .)
    RPAREN          reduce using rule 26 (string -> STRING .)
    IF              reduce using rule 26 (string -> STRING .)
    FUNCTION        reduce using rule 26 (string -> STRING .)
    VAR             reduce using rule 26 (string -> STRING .)
    ID              reduce using rule 26 (string -> STRING .)
    NUMBER          reduce using rule 26 (string -> STRING .)
    STRING          reduce using rule 26 (string -> STRING .)
    RBRACKET        reduce using rule 26 (string -> STRING .)
    SCOLO           reduce using rule 26 (string -> STRING .)


state 34

    (17) statement-list -> statement .
    (18) statement-list -> statement . statement-list
    (17) statement-list -> . statement
    (18) statement-list -> . statement statement-list
    (19) statement -> . declaration
    (20) statement -> . expression
    (21) statement -> . if-statement
    (4) declaration -> . funDeclaration
    (5) declaration -> . varDeclaration
    (22) expression -> . basic-expr
    (23) expression -> . assignment-expr SCOLO
    (24) expression -> . var-assign SCOLO
    (25) expression -> . comparison-expr
    (49) if-statement -> . IF LPAREN expression RPAREN block
    (50) if-statement -> . IF LPAREN expression RPAREN block else-statement
    (8) funDeclaration -> . FUNCTION function
    (6) varDeclaration -> . VAR ID EQ expression SCOLO
    (7) varDeclaration -> . VAR ID SCOLO
    (27) basic-expr -> . variable
    (28) basic-expr -> . number
    (29) basic-expr -> . string
    (35) assignment-expr -> . identifier math-operator identifier
    (36) assignment-expr -> . identifier math-operator assignment-expr
    (33) var-assign -> . variable EQ basic-expr
    (34) var-assign -> . variable EQ assignment-expr
    (37) comparison-expr -> . basic-expr comp-operator basic-expr
    (38) comparison-expr -> . basic-expr comp-operator comparison-expr
    (32) variable -> . ID
    (31) number -> . NUMBER
    (26) string -> . STRING
    (30) identifier -> . number

    RBRACKET        reduce using rule 17 (statement-list -> statement .)
    IF              shift and go to state 36
    FUNCTION        shift and go to state 1
    VAR             shift and go to state 7
    ID              shift and go to state 31
    NUMBER          shift and go to state 23
    STRING          shift and go to state 33

    funDeclaration                 shift and go to state 5
    statement                      shift and go to state 34
    string                         shift and go to state 22
    assignment-expr                shift and go to state 28
    basic-expr                     shift and go to state 24
    var-assign                     shift and go to state 25
    number                         shift and go to state 26
    if-statement                   shift and go to state 37
    varDeclaration                 shift and go to state 3
    statement-list                 shift and go to state 59
    declaration                    shift and go to state 35
    variable                       shift and go to state 27
    identifier                     shift and go to state 29
    expression                     shift and go to state 40
    comparison-expr                shift and go to state 32

state 35

    (19) statement -> declaration .

    IF              reduce using rule 19 (statement -> declaration .)
    FUNCTION        reduce using rule 19 (statement -> declaration .)
    VAR             reduce using rule 19 (statement -> declaration .)
    ID              reduce using rule 19 (statement -> declaration .)
    NUMBER          reduce using rule 19 (statement -> declaration .)
    STRING          reduce using rule 19 (statement -> declaration .)
    RBRACKET        reduce using rule 19 (statement -> declaration .)


state 36

    (49) if-statement -> IF . LPAREN expression RPAREN block
    (50) if-statement -> IF . LPAREN expression RPAREN block else-statement

    LPAREN          shift and go to state 60


state 37

    (21) statement -> if-statement .

    IF              reduce using rule 21 (statement -> if-statement .)
    FUNCTION        reduce using rule 21 (statement -> if-statement .)
    VAR             reduce using rule 21 (statement -> if-statement .)
    ID              reduce using rule 21 (statement -> if-statement .)
    NUMBER          reduce using rule 21 (statement -> if-statement .)
    STRING          reduce using rule 21 (statement -> if-statement .)
    RBRACKET        reduce using rule 21 (statement -> if-statement .)


state 38

    (16) block -> LBRACKET statement-list . RBRACKET

    RBRACKET        shift and go to state 61


state 39

    (15) block -> LBRACKET RBRACKET .

    IF              reduce using rule 15 (block -> LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 15 (block -> LBRACKET RBRACKET .)
    VAR             reduce using rule 15 (block -> LBRACKET RBRACKET .)
    ID              reduce using rule 15 (block -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 15 (block -> LBRACKET RBRACKET .)
    STRING          reduce using rule 15 (block -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 15 (block -> LBRACKET RBRACKET .)
    $end            reduce using rule 15 (block -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 15 (block -> LBRACKET RBRACKET .)


state 40

    (20) statement -> expression .

    IF              reduce using rule 20 (statement -> expression .)
    FUNCTION        reduce using rule 20 (statement -> expression .)
    VAR             reduce using rule 20 (statement -> expression .)
    ID              reduce using rule 20 (statement -> expression .)
    NUMBER          reduce using rule 20 (statement -> expression .)
    STRING          reduce using rule 20 (statement -> expression .)
    RBRACKET        reduce using rule 20 (statement -> expression .)


state 41

    (11) parameters -> LPAREN paramList RPAREN .

    LBRACKET        reduce using rule 11 (parameters -> LPAREN paramList RPAREN .)


state 42

    (13) paramList -> parameter COMMA . paramList
    (12) paramList -> . parameter
    (13) paramList -> . parameter COMMA paramList
    (14) parameter -> . ID

    ID              shift and go to state 21

    parameter                      shift and go to state 20
    paramList                      shift and go to state 62

state 43

    (39) comp-operator -> GREATER .

    ID              reduce using rule 39 (comp-operator -> GREATER .)
    NUMBER          reduce using rule 39 (comp-operator -> GREATER .)
    STRING          reduce using rule 39 (comp-operator -> GREATER .)


state 44

    (41) comp-operator -> GREATER_OR_EQUAL .

    ID              reduce using rule 41 (comp-operator -> GREATER_OR_EQUAL .)
    NUMBER          reduce using rule 41 (comp-operator -> GREATER_OR_EQUAL .)
    STRING          reduce using rule 41 (comp-operator -> GREATER_OR_EQUAL .)


state 45

    (43) comp-operator -> COMP .

    ID              reduce using rule 43 (comp-operator -> COMP .)
    NUMBER          reduce using rule 43 (comp-operator -> COMP .)
    STRING          reduce using rule 43 (comp-operator -> COMP .)


state 46

    (40) comp-operator -> LESS .

    ID              reduce using rule 40 (comp-operator -> LESS .)
    NUMBER          reduce using rule 40 (comp-operator -> LESS .)
    STRING          reduce using rule 40 (comp-operator -> LESS .)


state 47

    (37) comparison-expr -> basic-expr comp-operator . basic-expr
    (38) comparison-expr -> basic-expr comp-operator . comparison-expr
    (27) basic-expr -> . variable
    (28) basic-expr -> . number
    (29) basic-expr -> . string
    (37) comparison-expr -> . basic-expr comp-operator basic-expr
    (38) comparison-expr -> . basic-expr comp-operator comparison-expr
    (32) variable -> . ID
    (31) number -> . NUMBER
    (26) string -> . STRING

    ID              shift and go to state 31
    NUMBER          shift and go to state 23
    STRING          shift and go to state 33

    string                         shift and go to state 22
    basic-expr                     shift and go to state 63
    number                         shift and go to state 64
    variable                       shift and go to state 65
    comparison-expr                shift and go to state 66

state 48

    (44) comp-operator -> NOT .

    ID              reduce using rule 44 (comp-operator -> NOT .)
    NUMBER          reduce using rule 44 (comp-operator -> NOT .)
    STRING          reduce using rule 44 (comp-operator -> NOT .)


state 49

    (42) comp-operator -> SMALLER_OR_EQUAL .

    ID              reduce using rule 42 (comp-operator -> SMALLER_OR_EQUAL .)
    NUMBER          reduce using rule 42 (comp-operator -> SMALLER_OR_EQUAL .)
    STRING          reduce using rule 42 (comp-operator -> SMALLER_OR_EQUAL .)


state 50

    (24) expression -> var-assign SCOLO .

    RPAREN          reduce using rule 24 (expression -> var-assign SCOLO .)
    IF              reduce using rule 24 (expression -> var-assign SCOLO .)
    FUNCTION        reduce using rule 24 (expression -> var-assign SCOLO .)
    VAR             reduce using rule 24 (expression -> var-assign SCOLO .)
    ID              reduce using rule 24 (expression -> var-assign SCOLO .)
    NUMBER          reduce using rule 24 (expression -> var-assign SCOLO .)
    STRING          reduce using rule 24 (expression -> var-assign SCOLO .)
    RBRACKET        reduce using rule 24 (expression -> var-assign SCOLO .)
    SCOLO           reduce using rule 24 (expression -> var-assign SCOLO .)


state 51

    (33) var-assign -> variable EQ . basic-expr
    (34) var-assign -> variable EQ . assignment-expr
    (27) basic-expr -> . variable
    (28) basic-expr -> . number
    (29) basic-expr -> . string
    (35) assignment-expr -> . identifier math-operator identifier
    (36) assignment-expr -> . identifier math-operator assignment-expr
    (32) variable -> . ID
    (31) number -> . NUMBER
    (26) string -> . STRING
    (30) identifier -> . number

    ID              shift and go to state 31
    NUMBER          shift and go to state 23
    STRING          shift and go to state 33

    string                         shift and go to state 22
    basic-expr                     shift and go to state 67
    number                         shift and go to state 26
    assignment-expr                shift and go to state 68
    variable                       shift and go to state 65
    identifier                     shift and go to state 29

state 52

    (23) expression -> assignment-expr SCOLO .

    RPAREN          reduce using rule 23 (expression -> assignment-expr SCOLO .)
    IF              reduce using rule 23 (expression -> assignment-expr SCOLO .)
    FUNCTION        reduce using rule 23 (expression -> assignment-expr SCOLO .)
    VAR             reduce using rule 23 (expression -> assignment-expr SCOLO .)
    ID              reduce using rule 23 (expression -> assignment-expr SCOLO .)
    NUMBER          reduce using rule 23 (expression -> assignment-expr SCOLO .)
    STRING          reduce using rule 23 (expression -> assignment-expr SCOLO .)
    RBRACKET        reduce using rule 23 (expression -> assignment-expr SCOLO .)
    SCOLO           reduce using rule 23 (expression -> assignment-expr SCOLO .)


state 53

    (35) assignment-expr -> identifier math-operator . identifier
    (36) assignment-expr -> identifier math-operator . assignment-expr
    (30) identifier -> . number
    (35) assignment-expr -> . identifier math-operator identifier
    (36) assignment-expr -> . identifier math-operator assignment-expr
    (31) number -> . NUMBER

    NUMBER          shift and go to state 23

    identifier                     shift and go to state 69
    assignment-expr                shift and go to state 70
    number                         shift and go to state 71

state 54

    (45) math-operator -> PLUS .

    NUMBER          reduce using rule 45 (math-operator -> PLUS .)


state 55

    (47) math-operator -> MUL .

    NUMBER          reduce using rule 47 (math-operator -> MUL .)


state 56

    (48) math-operator -> DIV .

    NUMBER          reduce using rule 48 (math-operator -> DIV .)


state 57

    (46) math-operator -> MINUS .

    NUMBER          reduce using rule 46 (math-operator -> MINUS .)


state 58

    (6) varDeclaration -> VAR ID EQ expression SCOLO .

    FUNCTION        reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    VAR             reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    $end            reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    IF              reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    ID              reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    NUMBER          reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    STRING          reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)
    RBRACKET        reduce using rule 6 (varDeclaration -> VAR ID EQ expression SCOLO .)


state 59

    (18) statement-list -> statement statement-list .

    RBRACKET        reduce using rule 18 (statement-list -> statement statement-list .)


state 60

    (49) if-statement -> IF LPAREN . expression RPAREN block
    (50) if-statement -> IF LPAREN . expression RPAREN block else-statement
    (22) expression -> . basic-expr
    (23) expression -> . assignment-expr SCOLO
    (24) expression -> . var-assign SCOLO
    (25) expression -> . comparison-expr
    (27) basic-expr -> . variable
    (28) basic-expr -> . number
    (29) basic-expr -> . string
    (35) assignment-expr -> . identifier math-operator identifier
    (36) assignment-expr -> . identifier math-operator assignment-expr
    (33) var-assign -> . variable EQ basic-expr
    (34) var-assign -> . variable EQ assignment-expr
    (37) comparison-expr -> . basic-expr comp-operator basic-expr
    (38) comparison-expr -> . basic-expr comp-operator comparison-expr
    (32) variable -> . ID
    (31) number -> . NUMBER
    (26) string -> . STRING
    (30) identifier -> . number

    ID              shift and go to state 31
    NUMBER          shift and go to state 23
    STRING          shift and go to state 33

    basic-expr                     shift and go to state 24
    var-assign                     shift and go to state 25
    number                         shift and go to state 26
    comparison-expr                shift and go to state 32
    assignment-expr                shift and go to state 28
    variable                       shift and go to state 27
    identifier                     shift and go to state 29
    expression                     shift and go to state 72
    string                         shift and go to state 22

state 61

    (16) block -> LBRACKET statement-list RBRACKET .

    IF              reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    FUNCTION        reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    VAR             reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    ID              reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    NUMBER          reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    STRING          reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    RBRACKET        reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    $end            reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)
    ELSE            reduce using rule 16 (block -> LBRACKET statement-list RBRACKET .)


state 62

    (13) paramList -> parameter COMMA paramList .

    RPAREN          reduce using rule 13 (paramList -> parameter COMMA paramList .)


state 63

    (37) comparison-expr -> basic-expr comp-operator basic-expr .
    (37) comparison-expr -> basic-expr . comp-operator basic-expr
    (38) comparison-expr -> basic-expr . comp-operator comparison-expr
    (39) comp-operator -> . GREATER
    (40) comp-operator -> . LESS
    (41) comp-operator -> . GREATER_OR_EQUAL
    (42) comp-operator -> . SMALLER_OR_EQUAL
    (43) comp-operator -> . COMP
    (44) comp-operator -> . NOT

    SCOLO           reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    IF              reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    FUNCTION        reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    VAR             reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    ID              reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    NUMBER          reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    STRING          reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    RBRACKET        reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    RPAREN          reduce using rule 37 (comparison-expr -> basic-expr comp-operator basic-expr .)
    GREATER         shift and go to state 43
    LESS            shift and go to state 46
    GREATER_OR_EQUAL shift and go to state 44
    SMALLER_OR_EQUAL shift and go to state 49
    COMP            shift and go to state 45
    NOT             shift and go to state 48

    comp-operator                  shift and go to state 47

state 64

    (28) basic-expr -> number .

    GREATER         reduce using rule 28 (basic-expr -> number .)
    LESS            reduce using rule 28 (basic-expr -> number .)
    GREATER_OR_EQUAL reduce using rule 28 (basic-expr -> number .)
    SMALLER_OR_EQUAL reduce using rule 28 (basic-expr -> number .)
    COMP            reduce using rule 28 (basic-expr -> number .)
    NOT             reduce using rule 28 (basic-expr -> number .)
    SCOLO           reduce using rule 28 (basic-expr -> number .)
    IF              reduce using rule 28 (basic-expr -> number .)
    FUNCTION        reduce using rule 28 (basic-expr -> number .)
    VAR             reduce using rule 28 (basic-expr -> number .)
    ID              reduce using rule 28 (basic-expr -> number .)
    NUMBER          reduce using rule 28 (basic-expr -> number .)
    STRING          reduce using rule 28 (basic-expr -> number .)
    RBRACKET        reduce using rule 28 (basic-expr -> number .)
    RPAREN          reduce using rule 28 (basic-expr -> number .)


state 65

    (27) basic-expr -> variable .

    GREATER         reduce using rule 27 (basic-expr -> variable .)
    LESS            reduce using rule 27 (basic-expr -> variable .)
    GREATER_OR_EQUAL reduce using rule 27 (basic-expr -> variable .)
    SMALLER_OR_EQUAL reduce using rule 27 (basic-expr -> variable .)
    COMP            reduce using rule 27 (basic-expr -> variable .)
    NOT             reduce using rule 27 (basic-expr -> variable .)
    SCOLO           reduce using rule 27 (basic-expr -> variable .)
    IF              reduce using rule 27 (basic-expr -> variable .)
    FUNCTION        reduce using rule 27 (basic-expr -> variable .)
    VAR             reduce using rule 27 (basic-expr -> variable .)
    ID              reduce using rule 27 (basic-expr -> variable .)
    NUMBER          reduce using rule 27 (basic-expr -> variable .)
    STRING          reduce using rule 27 (basic-expr -> variable .)
    RBRACKET        reduce using rule 27 (basic-expr -> variable .)
    RPAREN          reduce using rule 27 (basic-expr -> variable .)


state 66

    (38) comparison-expr -> basic-expr comp-operator comparison-expr .

    SCOLO           reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    IF              reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    FUNCTION        reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    VAR             reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    ID              reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    NUMBER          reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    STRING          reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    RBRACKET        reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)
    RPAREN          reduce using rule 38 (comparison-expr -> basic-expr comp-operator comparison-expr .)


state 67

    (33) var-assign -> variable EQ basic-expr .

    SCOLO           reduce using rule 33 (var-assign -> variable EQ basic-expr .)


state 68

    (34) var-assign -> variable EQ assignment-expr .

    SCOLO           reduce using rule 34 (var-assign -> variable EQ assignment-expr .)


state 69

    (35) assignment-expr -> identifier math-operator identifier .
    (35) assignment-expr -> identifier . math-operator identifier
    (36) assignment-expr -> identifier . math-operator assignment-expr
    (45) math-operator -> . PLUS
    (46) math-operator -> . MINUS
    (47) math-operator -> . MUL
    (48) math-operator -> . DIV

    SCOLO           reduce using rule 35 (assignment-expr -> identifier math-operator identifier .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 57
    MUL             shift and go to state 55
    DIV             shift and go to state 56

    math-operator                  shift and go to state 53

state 70

    (36) assignment-expr -> identifier math-operator assignment-expr .

    SCOLO           reduce using rule 36 (assignment-expr -> identifier math-operator assignment-expr .)


state 71

    (30) identifier -> number .

    PLUS            reduce using rule 30 (identifier -> number .)
    MINUS           reduce using rule 30 (identifier -> number .)
    MUL             reduce using rule 30 (identifier -> number .)
    DIV             reduce using rule 30 (identifier -> number .)
    SCOLO           reduce using rule 30 (identifier -> number .)


state 72

    (49) if-statement -> IF LPAREN expression . RPAREN block
    (50) if-statement -> IF LPAREN expression . RPAREN block else-statement

    RPAREN          shift and go to state 73


state 73

    (49) if-statement -> IF LPAREN expression RPAREN . block
    (50) if-statement -> IF LPAREN expression RPAREN . block else-statement
    (15) block -> . LBRACKET RBRACKET
    (16) block -> . LBRACKET statement-list RBRACKET

    LBRACKET        shift and go to state 16

    block                          shift and go to state 74

state 74

    (49) if-statement -> IF LPAREN expression RPAREN block .
    (50) if-statement -> IF LPAREN expression RPAREN block . else-statement
    (51) else-statement -> . ELSE block

    IF              reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    FUNCTION        reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    VAR             reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    ID              reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    NUMBER          reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    STRING          reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    RBRACKET        reduce using rule 49 (if-statement -> IF LPAREN expression RPAREN block .)
    ELSE            shift and go to state 76

    else-statement                 shift and go to state 75

state 75

    (50) if-statement -> IF LPAREN expression RPAREN block else-statement .

    IF              reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)
    FUNCTION        reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)
    VAR             reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)
    ID              reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)
    NUMBER          reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)
    STRING          reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)
    RBRACKET        reduce using rule 50 (if-statement -> IF LPAREN expression RPAREN block else-statement .)


state 76

    (51) else-statement -> ELSE . block
    (15) block -> . LBRACKET RBRACKET
    (16) block -> . LBRACKET statement-list RBRACKET

    LBRACKET        shift and go to state 16

    block                          shift and go to state 77

state 77

    (51) else-statement -> ELSE block .

    IF              reduce using rule 51 (else-statement -> ELSE block .)
    FUNCTION        reduce using rule 51 (else-statement -> ELSE block .)
    VAR             reduce using rule 51 (else-statement -> ELSE block .)
    ID              reduce using rule 51 (else-statement -> ELSE block .)
    NUMBER          reduce using rule 51 (else-statement -> ELSE block .)
    STRING          reduce using rule 51 (else-statement -> ELSE block .)
    RBRACKET        reduce using rule 51 (else-statement -> ELSE block .)

